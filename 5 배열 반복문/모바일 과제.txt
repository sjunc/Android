



11번
// 1. 값으로 컬렉션 생성하기
var mutableList = mustableListOf("MON", "TUE", "WEN")
// 값을 추가합니다.
mutableList.add("THU")
// 값을 꺼냅니다.
Log.d("Collection", "mutablelList 의 첫 번째 값은 ${mutableList.get(0)}입니다.")
Log.d("Collection", "mutableList 의 두 번째 값은 ${mutableList.get(1)}입니다.")

//2. 빈 컬렉션 생성하기
var stringList = mutableListOf<string>() // 문자열로 된 빈 컬렉션을 생성합니다.
// 값을 추가합니다.
stringList.add("월")
stringList.add("화")
stringList.add("수")
// 값을 변경합니다.
stringList.set(1, "요일 변경")
// 사용
Log.d("Collection", "stringList에 입력된 두번째 값은 ${stringList.get(1)}입니다.")
// 삭제
stringList.removeAt(1) // 두번째 값이 삭제됩니다.
Log.d("Collection", "stringList에 입력된 두번째 값은 ${stringList.get(1)}입니다.")
// 개수를 출력합니다. 
Log.d("Collection", "stringList에는 ${stringList.size}개의 값이 있습니다.")

12번
//1. 셋 생성하고 값 추가하기
var set = mutableSetOf<String>()
set.add("JAN")
set.add("FEB")
set.add("MAR")
set.add("JAN") // 동일한 값은 입력되지 않습니다.

//2. 전체 데이터 출력하기
Log.d("Collection", "Set 전체 출력 = ${set}")

//3. 특정 값 삭제하기
set.remove("FEB")
Log.d("Collection", "Set 전체 출력 = ${set}")


13번
// 1. 맵 생성하기
var map = mutableMapOf<String,String>()
//2. 값 넣기 
map.put("키1", "값2")
map.put("키2", "값2")
map.put("키3", "값3")
// 3. 값 사용하기
var variable = map.get("키2")
Log.d("Collection", "키2의 값은 ${variable}입니다.")
// 4. 값 수정하기 
map.put ("키2", "두 번째 값 수정")
Log.d("Collection", "키 2의 값은 ${map.get("키2")}입니다.")
//5. 값 삭제하기 
map.remove("키2")
//5.1 없는 것을 불러오면 null 값이 출력된다.
Log.d("Collection", "키2의 값은 ${map.get("키2")}입니다.")

14번
//1. 일반적인 반복문 사용으로 열번 반복하기
for(index in 1..10){
	Log.d("For", "현재 숫자는 ${index}")
}
// 2. 마지막 숫자 제외하기
var array = arrayOf("JAN", "FEB", "MAR", "APR", "MAY","JUN")
for (index in 0 until array.size){
	Log.d("For", "현재 월은 ${array.get(index)}입니다.")
}
//3.건너뛰기
for (index in 0..10 step 3){
	Log.d("For", "건너뛰기: ${index}")
}
//4. 감소시키기
for (index in 10 downTo 0){
	Log.d("For", "감소시키기: ${index}")
}
//4.1 감소시키면서 건너뛰기 
for (index in 10 downTo 0 step3){
	Log.d("For", "건너뛰면서 감소시키기: ${index}")
}
//5.1 배열, 컬렉션 사용하기  이게 된다고?
for (month in array) {
	Log.d("For", "현재 월은 ${month}입니다.")
}

15번

 // 1. 일반적인 while 사용하기
        var current = 1
        val until = 12
        while (current < until) {
            Log.d("While", "현재 값은 ${current}입니다.")
        //current를 1씩 증가시켜서 열한 번 반복후 while문을 탈출합니다.
                    current = current + 1           //current += 1 과 같은가?
        }
        // 2. do ~ while 사용하기
        var game = 1
        val match = 6
        do{
            Log.d("While", "${game}게임 이겼습니다. 우승까지 ${match-game}게임 남았습니다.")
            game += 1
        } while (game<match)

        // 3. while vs do - while
        //while 테스트
        game =  6
        while (game < match){
            Log.d("While", "**** while 테스트입니다.****")
            game += 1
        }
        // do ~ while 테스트
        game = 6
        do {
            Log.d("While", "**** do ~ while 테스트입니다. ****")
        } while (game < match)

        // 4. break 반복문 탈출하기
        for (index in 1..10){
            Log.d("While", "break > 현재 index는 $index 입니다.")
            if (index > 5) { // index가 5보다 크면 break 명령어로 현재 반복문을 벗어납니다.")
                break // 따라서 Log는 6까지만 출력됩니다.
            }
        }
        // 5. continue 다음 반복문으로
        for (except in 1..10){
        //except가 3보다 크고 8보다 작으면 continue 명령으로 로그를 찍지않고
        // for 문의 처음으로 jump합니다.
            if (except > 3 && except < 8){
                continue
            }
        //따라서 4, 5, 6, 7은 출력 되지 않습니다.
            Log.d("While", "Continue > 현재 index는 $except 입니다.")
        }
        // 0. 무한루프 테스트
        // 이 아래의 주석을 해제하고 실행해보세요.
        // 무한루프에 빠지는 while 문 - 실행 후 멈추기 위해서는 안드로이드 스튜디오 우측 상단에 있는
        //빨간색 사각형 아이콘을 클릭하면 됩니다.
        // var a = 1
        //while (a==1){
        //Log.d("while", "조건을 만족하면 여기를 출력하세요!")
        //break
        //}

16번
 // 1. 반환값이 있는 함수
        fun square(x: Int): Int {
            return x * x // <- square 함수는 입력받은 값을 제곱을 해서 반환합니다.
        }
        //2. 변환값이 없는 함수
        fun printSum(x:Int, y: Int){
            Log.d("fun", "x + y = ${x + y}")
        }

        //3. 입력값 없이 반환값만 있는 함수
        fun getPI(): Double{
            return 3.14
        }

        //7. 기본값을 갖는 함수
        fun newFuntion(name: String, age: Int = 29, weight: Double = 69.5){
            Log.d("fun", "name의 값은 ${name}입니다. ")
            Log.d("fun", "age의 값은 ${age}입니다.")
            Log.d("fun", "weight의 값은 ${weight}입니다.")
        }

        // 4. 반환값이 있는 함수 square 사용하기
        var squareResult = square(30)
        Log.d("fun", "30의 제곱은 ${squareResult}입니다.")

        // 5.반환값이 없는 함수는 그냥 실행한다.
        printSum(3, 5)

        // 6. 입력값이 없는 함수 사용하기
        var PI = getPI()
        Log.d("fun", "지름이 10인 원의 둘레는 ${10 * PI}입니다.")

        //7. 기본값이 있는 함수 사용하기
        newFuntion("Hello")

        //8. 파라미터 이름을 직접 지정하기
        newFuntion("Michael", weight = 67.5)
    }
}

1. 질문 name: String 방식으로 표기하는 것이 자료형을 표시하는 방법인가?

2. $ 다음에 {}넣고 안 넣고의 차이는 무엇인가?

3. 굳이 함수 정의 부터 안하고 아래로 내린 이유는 무엇인가? 인터프리터방식이 아니란걸 보여주는 건가? 컴파일 방식이라고? 
서버랑 클라이언트랑 뭐가 다른거야? 



배운점
코틀린의 함수는 소문자대문자대문자로 입력해야 인식
자료형은 첫 글자를 대문자로 써야 인식함.
do는 while과 달리 저건을 뒤에 붙일 수 없다. 

